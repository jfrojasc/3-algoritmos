#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=1.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=1.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=1.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=1.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=1.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=1.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
print(sessionInfo())
require(knitr)
# include this code chunk as-is to set options
opts_chunk$set(comment = NA, prompt = TRUE, tidy = FALSE,
fig.width = 7, fig.height = 7,echo = TRUE,
fig.align='center', message = FALSE,
warning = FALSE, cache=TRUE)
Sys.setlocale("LC_TIME", "C")
# Random numbers for seeds: 713945, 805547
bc_full <- read.csv(params$data1, stringsAsFactors = FALSE)
# dim(bc_full)
# head(bc_full[1:4])
dim(bc_full)
head(bc_full)
# 1234567890123456789012345678901234567890123456789012345678901234567890
bc <- bc_full[,-1]
# Figura 1. Izq
#str(bc)
table(is.na(bc))
# datos para un sÃ³lo entrenamiento, no se utilizan
dim <- dim(bc)
num_train <- round((dim[1]*params$ptrain),0)
num_test <- dim[1] - num_train
# Benign / Malignant
bc$diagnosis <- factor(bc$diagnosis, levels= c("B", "M"), labels=c("Benign", "Malignant"))
table(bc$diagnosis)
table(is.na(bc))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
bc_n <- as.data.frame(lapply(bc[1:(round(dim[2],0)-1)], normalize))
# Figura 1. der
par(mar=c(11,3,1,1))
means_n <- as.numeric((lapply(bc_n, mean)))
boxplot(bc_n[1:30], las=2, col="lightblue")
# , main="Figura 2. Distribucion de las variables del dataset normalizadas"
abline(h=mean(means_n), col="red")
library(corrplot)
par(mar=c(11,3,1,1))
C <- cor(round(as.matrix(bc_n[1:30]), 4))
corrplot(C, method = "pie")
# 2021-07-19
library(caret)
bc_n_full <- cbind(bc_n, bc$diagnosis)
names(bc_n_full)[31] <- "diagnosis"
dim(bc_n_full)
set.seed(params$seed_train)
inTrain <- createDataPartition( y = 1:nrow(bc_n_full),
p = params$ptrain,
list = FALSE )
# KNN, SVM, RF
train <- bc_n_full[inTrain, ]
test <- bc_n_full[-inTrain, ]
table(train[,31])
table(test[,31])
#ANN
#Data Partition
set.seed(params$seed_alg)
inTrain_ann <- createDataPartition(y=bc_n_full$diagnosis, p=round(params$ptrain,4), list=FALSE)
# Normalized dataset
ann_data_n <- cbind(bc_n, bc$diagnosis)
names(ann_data_n)[31] <- "diagnosis"
train_ann <- ann_data_n[inTrain_ann, ]
test_ann  <- ann_data_n[-inTrain_ann, ]
#train.set <- dataset[inTrain,]
#test.set  <- dataset[-inTrain,]
( c(nrow(train)/nrow(test), nrow(train_ann)/nrow(test_ann)) )
# should be around 2
set.seed(params$seed_alg)
start_time <- Sys.time()
ctrl <- trainControl(method="repeatedcv",repeats = 10, number = 10,
classProbs = T, savePredictions = T)
model_knn <- train(diagnosis ~ ., data = train, method = "knn",
trControl = ctrl, preProcess = c("center","scale"),
tuneLength = 20)
end_time <- Sys.time()
(knn_time <- end_time - start_time)
prediction <- predict(model_knn, test)
ct <- table(prediction, test$diagnosis)
(cm_knn <- confusionMatrix(ct, positive="Malignant"))
set.seed(params$seed_alg)
start_time <- Sys.time()
model_svm <- train(diagnosis ~ ., train, method='svmLinear',
trControl= trainControl(method='cv',number=10,repeats = 10,
classProbs = T,
savePredictions = T),
tuneGrid= NULL, trace = FALSE)
end_time <- Sys.time()
(svm_time <- end_time - start_time)
prediction <- predict(model_svm, test)
ct <- table(prediction, test$diagnosis)
(cm_svm <- confusionMatrix(ct, positive="Malignant"))
set.seed(params$seed_alg)
ctrl <- trainControl( method = "repeatedcv",
number = 10,
repeats = 10,
summaryFunction = defaultSummary,
verboseIter = FALSE,
classProbs = TRUE,
savePredictions = TRUE)
# repeats=3 )
## Tunegrid for Random Forest
# mtry define cuantas variables se seleccionan al azar en cada split. Por
# defecto sqrt(n.variables)
grid_rf <- expand.grid(.mtry = c(2,4,8,16))
start_time <- Sys.time()
model_rf <- train (diagnosis ~ .,
data = train,
method ="rf",
trControl=ctrl,
tuneGrid = grid_rf,
metric="Accuracy",
prePoc = c("center", "scale"),
verbose =FALSE,
trace = FALSE
)
end_time <- Sys.time()
(rf_time <- end_time - start_time)
pred_rf <- predict (model_rf, newdata = test)
(cm_rf <- confusionMatrix(data=pred_rf, test$diagnosis, positive = "Malignant"))
print("KNN")
cm_knn$overall[1]
cm_knn$overall[2]
cm_knn$byClass
print("SVM")
cm_svm$overall[1]
cm_svm$overall[2]
cm_svm$byClass
print("RF")
cm_rf$overall[1]
cm_rf$overall[2]
cm_rf$byClass
library(pROC)
# "royalblue","dodgerblue", "deepskyblue", "lightskyblue"
par(mfrow=c(1,3))
plot.roc(model_knn$pred$obs,
model_knn$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="royalblue", main = "Curva ROC para kNN")
plot.roc(model_svm$pred$obs,
model_svm$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="dodgerblue", main = "Curva ROC para SVM")
plot.roc(model_rf$pred$obs,
model_rf$pred$Malignant,
smoothed = TRUE,
legacy.axes=TRUE,
# arguments for ci
ci=TRUE, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
#plot=TRUE,
auc.polygon=TRUE,
max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE,
col="deepskyblue", main = "Curva ROC para RF")
# https://stackoverflow.com/questions/46891681/calculating-auc-from-nnet-model
# https://www.r-bloggers.com/2016/11/calculating-auc-the-area-under-a-roc-curve/
#plot.roc(test_ann$diagnosis,
#         prediction_ann_prob$Malignant,
#         smoothed = TRUE,
#         legacy.axes=TRUE,
#         ci=TRUE, ci.alpha=0.9, stratified=FALSE,
#         auc.polygon=TRUE,
#         max.auc.polygon=TRUE, grid=TRUE,
#         print.auc=TRUE, show.thres=TRUE,
#         col="blue", main = "Curva ROC para RF")
print(sessionInfo())
